# Path to your oh-my-zsh installation.
export ZSH=~/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes

ZSH_THEME="powerlevel9k/powerlevel9k"
#avbl colors
#for code ({000..255}) print -P -- "$code: %F{$code}This is how your text would look like%f"
DEFAULT_USER=`whoami`

prompt_zsh_showStatus () {
  state=`osascript -e 'tell application "Spotify" to player state as string'`;
  if [ $state = "playing" ]; then
    artist=`osascript -e 'tell application "Spotify" to artist of current track as string'`;
    track=`osascript -e 'tell application "Spotify" to name of current track as string'`;

    echo -n "$artist - $track";
  fi
}

#source ~/.rc1
source ~/.rc2
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
bindkey '^@' autosuggest-execute

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
export NVM_DIR="$HOME/.nvm"
export MVN_HOME=/usr/local/Cellar/maven/3.3.9
export CASS_HOME=/usr/local/Cellar/cassandra21/2.1.13
export ZK_HOME=/usr/local/Cellar/zookeeper/3.4.9
export PG_HOME=/usr/local/Cellar/postgresql/9.6.2
export PGDATA=/usr/local/Cellar/postgresql/9.6.2/data
export APP_ENGINE_HOME=/Users/adi/work/sw/appengine-java-sdk-1.9.58
export MVN_HOME2=/Users/adi/work/sw/apache-maven-3.3.9

export SERVICE_CREDS_FILE=/Users/adi/priv/flaresServiceAccountKey.json

export CLICOLOR=1
export TERM=xterm-256color
export KSHM=/opt/.adi/files
export PRJHM=~/work/projects

export GOPATH=$HOME/go

export PATH=/usr/local/opt/node@10/bin:/usr/local/git/current/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:$CASS_HOME/bin:$ZK_HOME/bin:$PG_HOME/bin:$MVN_HOME/bin:$APP_ENGINE_HOME/bin:$MVN_HOME2/bin:$HOME/work/sw/appengine-java-sdk-1.9.58/bin:$HOME/work/sw/google-cloud-sdk/bin:/usr/local/bin:$GOPATH/bin

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

unsetopt inc_append_history
unsetopt share_history

alias ll='ls -alhSG'

cdl() {
   builtin cd $1 && ll
}

aws-ips() {
for region in $(aws ec2 describe-regions --query "Regions[*].[RegionName]" --output text); do
echo $region  
aws ec2 describe-instances --region "$region" --query "Reservations[*].Instances[*].PublicIpAddress"
done;
}

alias ec='echo -e'
alias al='alias'
al ltr='ls -ahltr'
alias cd='cdl'
alias gspn='git show --pretty --name-status'
alias gl='git log'
alias gs='git status'
alias gr='git rebase'
alias grm='git rebase master'
alias gri='git rebase -i'
alias gm='git merge'
alias gpl='git pull'
alias vib='vi ~/.bashrc'
alias visc='vi ~/.ssh/config'
alias sbrc='source ~/.bashrc'
alias viz='vi ~/.zshrc'
alias src='source ~/.zshrc'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

alias dki='docker images'
alias dps='docker ps -a'
alias drmi='docker rmi -f'
alias drm='docker rm -f'
alias dex='docker exec -it'
alias dlog='docker logs'
alias drmall='docker rm -f $(docker ps -aq)'
alias drmiall='docker rmi -f $(docker images -q)'
alias drst='docker restart'
alias dstop='docker stop'
alias dstart='docker start'
alias am=atom
al rmf='rm -f'
al rmrf='rm -rf'
al gri5='git rebase -i HEAD~5'
al gri4='git rebase -i HEAD~4'
al gri3='git rebase -i HEAD~3'
al gri2='git rebase -i HEAD~2'
al gri1='git rebase -i HEAD~1'
al gpf='git push -f'
al gpu='git push -u'

al psg='ps -eaf | grep'
al cfn='caffeinate -i'
al clr='clear'
al sudo='sudo '

al gac='geth account'
al gach='geth account help'
al guac='geth --unlock'

gacl() {
  geth account list --keystore $KSHM
}

gacn() {
  geth account new --keystore $KSHM
}

gaci() {
  geth account import --keystore $KSHM $1
}

gacu() {
  geth account update --keystore $KSHM $1
}

al bri='brew install'
al bru='brew update'
alias str='open -a SourceTree ./'
al dcp='docker cp'
al wal='open -a Brave /Users/adi/work/sw/etherwallet-v3.10.2.4/index.html'
al rscrl='osascript $PRJHM/files/scripts/reverseScroll.scpt'
al gpm='git push origin HEAD:refs/for/master'

al fbs='firebase serve'
al fbd='firebase deploy'
al aed='mvn appengine:deploy'
al aer='mvn appengine:run'
al aest='mvn appengine:start'
al aesp='mvn appengine:stop'
al epd='gcloud endpoints services deploy'
al trc='truffle compile'
al trm='truffle migrate'
al tri='truffle init'
al trd='truffle develop'
al trcn='truffle console'
al trt='truffle test'

epscv() {
  gcloud endpoints configs list --service=$1
}

sshs() {
  ssh $@ "cat > /tmp/.bashrc_temp" < ~/.bashrc
  ssh -t $@ "bash --rcfile /tmp/.bashrc_temp ; rm /tmp/.bashrc_temp"
}

al googler=/usr/local/bin/googler
al gg=googler
al ggx='googler --exact'
al ggs='googler --site'
al ggf='googler --first'

# The next line enables shell command completion for gcloud.
if [ -f '/Users/adi/work/sw/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/adi/work/sw/google-cloud-sdk/completion.zsh.inc'; fi
export NODE_PATH="/usr/local/lib/node_modules"
al depe='dep ensure'
al gob='go build'
al gor='go run'
al goi='go install'
al depea='dep ensure -add'
al deps='dep status'
al depeu='dep ensure -update'
al depc='dep check'
